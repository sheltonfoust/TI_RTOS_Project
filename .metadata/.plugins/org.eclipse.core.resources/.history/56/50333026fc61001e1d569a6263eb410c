#ifndef LIBRARY_H_
#define LIBRARY_H_

#define NUMERROR 4
#define VERSION "4.2"
#define ASSIGNMENT 4
#define AUTHOR "Shelton Foust"
#define MAXLEN 365
#define NUMGPIOS 8
#define NUMCALLBACKS 4
#define NUMMSGS 10
#define NUMPAYLOADS 10

#define MSG_OVERFLOW 0
#define INVALID_OPERATION 1
#define WRONG_TYPE 2
#define BAD_NUMBER 3
#include <ti/drivers/UART.h>
#include <ti/drivers/GPIO.h>
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/gates/GateSwi.h>
#include <ti/sysbios/knl/Swi.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/drivers/Timer.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <stdbool.h>


#include <stdio.h>
#include <string.h>
#include <stdlib.h>


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Structs


typedef struct _BiosStruct
{
    Task_Handle messageTask;
    Task_Handle uartReadTask;
    Semaphore_Handle uartReadSemaphore;
    Swi_Handle timer0Swi;
    GateSwi_Handle callbackGate;
} BiosStruct;


typedef struct _callback
{
    int index;
    int count;
    bool hwiFlag;
    char payload[MAXLEN];
} Callback;

typedef struct _message
{
    int index;
    int msgCount;
    char msgBuffer[MAXLEN];
} Message;


typedef struct _MessageQ
{
    int msgReading;
    int msgWriting;
    Message messages[NUMMSGS];
} MessageQ;


typedef struct _PayloadQ
{
    int payloadReading;
    int payloadWriting;
    int binaryCount[NUMPAYLOADS];
    char payloads[NUMPAYLOADS][MAXLEN];
} PayloadQ;


typedef struct _GlobalStruct
{
    int timer0Period;
    int errorCounts[NUMERROR];
    Callback callbacks[NUMCALLBACKS];
    BiosStruct bios;
    MessageQ uartInQ;
    PayloadQ payloadQ;
    UART_Handle uart;
    Timer_Handle timer0;
} GlobalStruct;


// Structs
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


GlobalStruct Glo;



void aboutParse();
void errorParse(char* input);
void errorBase();
void gpioBase();
void helpBase();
void memoryReadParse(char* input);
void printParse(char* input);
void readGPIOprint(int gpio);
void writeGPIOprint(int gpioNum, char* remainder);
void removeSpaces(char* noSpaces, const char* input);
void gpioParse(char* input);
void helpParse(char* input);
int startsWith(char *input, char *commandName);



#endif
