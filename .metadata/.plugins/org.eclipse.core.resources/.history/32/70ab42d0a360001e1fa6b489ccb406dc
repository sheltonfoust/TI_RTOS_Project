#include "library.h"


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Parsing Functions


void aboutParse(UART_Handle uart)
{
    char output[MAXLEN];

    sprintf(output, "Testing sprintf...\n\r");
    UART_write(uart, &output, strlen(output));
    sprintf(output, "Testing using sprintf with int. This is a 5: %d\n\r", 5);
    UART_write(uart, &output, strlen(output));
    sprintf(output, "Author: %s\n\r", AUTHOR);
    UART_write(uart, &output, strlen(output));
    sprintf(output, "Version: %s\n\r", VERSION);
    UART_write(uart, &output, strlen(output));
    sprintf(output, "Assignment: %d\n\r", ASSIGNMENT);
    UART_write(uart, &output, strlen(output));
    sprintf(output, "Compile Timestamp: %s %s\n\r", __TIME__, __DATE__);
    UART_write(uart, &output, strlen(output));
}


void errorParse(UART_Handle uart, char* input)
{

    char noSpaces[MAXLEN];

    removeSpaces(noSpaces, input);
    int lenAfterCommand = strlen(noSpaces) - strlen("-error");
    char afterCommand[MAXLEN];
    strncpy(afterCommand, noSpaces + strlen("-error"), lenAfterCommand);

    if (strlen("-error") == strlen(noSpaces))
    {

        errorBase(uart);
    }
    else if (startsWith(afterCommand, "c"))
    {
        int error;
        for (error = 0; error < NUMERROR; error++)
        {
            errorCounts[error] = 0;
        }
        errorBase(uart);
    }
    else
    {
        char output[MAXLEN];
        char *endPtr;
        int error = strtol(afterCommand, &endPtr, 10);
        if (endPtr == afterCommand) // No number (nor c) is given after -error
        {
            char output [MAXLEN];
            sprintf(output, "A number or \"c\" was expected after -error\n\r");
            UART_write(uart, &output, strlen(output));
            errorCounts[WRONG_TYPE]++;
        }
        else if (error == MSG_OVERFLOW)
        {
            sprintf(output, "%d. Message Overflow: %d\n\r", MSG_OVERFLOW, errorCounts[MSG_OVERFLOW]);
            UART_write(uart, &output, strlen(output));
        }
        else if (error == INVALID_OPERATION)
        {
            sprintf(output, "%d. Invalid Operation: %d\n\r", INVALID_OPERATION, errorCounts[INVALID_OPERATION]);
            UART_write(uart, &output, strlen(output));
        }
        else if (error == WRONG_TYPE)
        {
            sprintf(output, "%d. Wrong Type: %d\n\r", WRONG_TYPE, errorCounts[WRONG_TYPE]);
            UART_write(uart, &output, strlen(output));
        }
        else if (error == BAD_NUMBER)
        {
            sprintf(output, "%d. Bad Number: %d\n\r", BAD_NUMBER, errorCounts[BAD_NUMBER]);
            UART_write(uart, &output, strlen(output));
        }
        else
        {
            sprintf(output, "Only error numbers 0 - %d are supported.\n\r", NUMERROR);
            UART_write(uart, &output, strlen(output));
            errorCounts[BAD_NUMBER]++;
        }
    }
}

void errorBase(UART_Handle uart)
{
    char output[MAXLEN];
    sprintf(output, "%d. Message Overflow: %d\n\r", MSG_OVERFLOW, errorCounts[MSG_OVERFLOW]);
    UART_write(uart, &output, strlen(output));

    sprintf(output, "%d. Invalid Operation: %d\n\r", INVALID_OPERATION, errorCounts[INVALID_OPERATION]);
    UART_write(uart, &output, strlen(output));

    sprintf(output, "%d. Wrong Type: %d\n\r", WRONG_TYPE, errorCounts[WRONG_TYPE]);
    UART_write(uart, &output, strlen(output));

    sprintf(output, "%d. Bad Number: %d\n\r", BAD_NUMBER, errorCounts[BAD_NUMBER]);
    UART_write(uart, &output, strlen(output));
}


////////////////////////////////////////
// GPIO Parsing


void gpioParse(UART_Handle uart, char* input)
{
    char noSpaces[MAXLEN];

    removeSpaces(noSpaces, input);
    int lenAfterCommand = strlen(noSpaces) - strlen("-gpio");
    char afterCommand[MAXLEN];
    strncpy(afterCommand, noSpaces + strlen("-gpio"), lenAfterCommand);
    if (strlen("-gpio") == strlen(noSpaces) || startsWith(afterCommand, "r"))
    {
        gpioBase(uart);
        return;
    }

    char* remainderPtr;
    char remainder[MAXLEN];
    int gpio = strtol(afterCommand, &remainderPtr, 10);
    if (gpio < 0 || gpio >= NUMGPIO)
    {
        char output[MAXLEN];
        sprintf(output, "Only GPIOs 0 - %d are available.\n\r", NUMGPIO - 1);
        UART_write(uart, &output, strlen(output));
        errorCounts[BAD_NUMBER]++;
        return;
    }
    strncpy(remainder, afterCommand + 1, lenAfterCommand - 1); // assumes gpio int is 1 digit

    if (*remainderPtr == 0)
    {
        readGPIOprint(uart, gpio);
    }
    else if(startsWith(remainder, "r"))
    {
        readGPIOprint(uart, gpio);
    }
    else if(startsWith(remainder, "w"))
    {
        writeGPIOprint(uart, gpio, remainder);
    }
    else if (startsWith(remainder, "t"))
    {
        GPIO_toggle(gpio);
        readGPIOprint(uart, gpio);
    }
    else
    {
        char output[MAXLEN];
        sprintf(output, "Operation \"%s\" not valid.\n\r", input);
        UART_write(uart, &output, strlen(output));
        errorCounts[INVALID_OPERATION]++;
    }
    return;
}


void gpioBase(UART_Handle uart)
{
    int gpio = 0;
    for (gpio = 0; gpio < NUMGPIO; gpio++)
    {
       readGPIOprint(uart, gpio);
    }
}

void readGPIOprint(UART_Handle uart, int gpio)
{
    char output[MAXLEN];
    int gpioState = GPIO_read(gpio);
    sprintf(output, "\tgpio %d: %d\n\r", gpio, gpioState);
    UART_write(uart, &output, strlen(output));
}


void writeGPIOprint(UART_Handle uart, int gpioNum, char* remainder)
{
    char *endPtr;
    char gpioString[MAXLEN];
    strncpy(gpioString, remainder + 1, 1);
    gpioString[1] = 0;
    int gpioState = strtol(gpioString, &endPtr, 10);
    if(gpioString == endPtr) // no number is given after w
    {
        char output [MAXLEN];
        sprintf(output, "State was expected after -gpio w\n\r");
        UART_write(uart, &output, strlen(output));
        errorCounts[WRONG_TYPE]++;
    }
    else if (gpioState != 0 && gpioState != 1)
    {
        char output [MAXLEN];
        sprintf(output, "GPIO state can only be one or zero.\n\r");
        UART_write(uart, &output, strlen(output));
        errorCounts[BAD_NUMBER]++;
    }
    else
    {
        GPIO_write(gpioNum, gpioState);
        readGPIOprint(uart, gpioNum);
    }
}


// End GPIO Parsing
////////////////////////////////////////


void helpParse(UART_Handle uart, char* input)
{
    char afterCommand[MAXLEN];
    char output[MAXLEN];
    char noSpaces[MAXLEN];

    removeSpaces(noSpaces, input);

    if (strlen("-help") == strlen(noSpaces))
    {
        helpBase(uart);
        return;
    }
    int lenAfterCommand = strlen(noSpaces) - strlen("-help");
    strncpy(afterCommand, noSpaces + strlen("-help"), lenAfterCommand);
    afterCommand[lenAfterCommand] = 0;

    if      (startsWith(afterCommand, "-about") || startsWith(afterCommand, "about"))
    {
        sprintf(output, "Displays compile time, compile date, author, version, and homework number.\n\r");
        UART_write(uart, &output, strlen(output));
    }
    else if (startsWith(afterCommand, "-gpio") || startsWith(afterCommand, "gpio"))
    {
        sprintf(output, "Allows to read, write, and toggle gpios.\n\r");
        UART_write(uart, &output, strlen(output));
        sprintf(output, "gpio 0 to 3: LEDs.\n\r");
        UART_write(uart, &output, strlen(output));
        sprintf(output, "gpio 4: PK5\n\r");
        UART_write(uart, &output, strlen(output));
        sprintf(output, "gpio 5: PD4\n\r");
        UART_write(uart, &output, strlen(output));
        sprintf(output, "gpio 6-7 switches on the sides of the board\n\r");
        UART_write(uart, &output, strlen(output));
    }
    else if (startsWith(afterCommand, "-error") || startsWith(afterCommand, "error"))
    {
        sprintf(output, "Prints out counts of each kind of error.\n\r");
        UART_write(uart, &output, strlen(output));
    }
    else if (startsWith(afterCommand, "-help") || startsWith(afterCommand, "help"))
    {
        sprintf(output, "Lists commands and displays informations about commands.\n\r");
        UART_write(uart, &output, strlen(output));
    }
    else if (startsWith(afterCommand, "-memr") || startsWith(afterCommand, "memr"))
    {
            sprintf(output, "Displays memory contents of four locations by the address.\n\r");
            UART_write(uart, &output, strlen(output));
            sprintf(output, "0x00000000 to 0x000FFFFF: Flash\n\r");
            UART_write(uart, &output, strlen(output));
            sprintf(output, "0x20000000 to 0x2003FFFF: SRAM\n\r");
            UART_write(uart, &output, strlen(output));
            sprintf(output, "0x40000000 to 0x44054FFF: Peripherals (use caution)\n\r");
            UART_write(uart, &output, strlen(output));

    }
    else if (startsWith(afterCommand, "-print") || startsWith(afterCommand, "print"))
    {
        sprintf(output, "Prints out string after the command.\n\r");
        UART_write(uart, &output, strlen(output));
    }

    else
    {
        sprintf(output, "Operation \"%s\" not valid.\n\r\n\r", afterCommand);
        UART_write(uart, &output, strlen(output));
    }
}


void helpBase(UART_Handle uart)
{
    char output[MAXLEN];
    sprintf(output, "\t%s\n\r", "-about");
    UART_write(uart, &output, strlen(output));
    sprintf(output, "\t%s\n\r", "-error");
    UART_write(uart, &output, strlen(output));
    sprintf(output, "\t%s\n\r", "-gpio [gpioNum] [action]");
    UART_write(uart, &output, strlen(output));
    sprintf(output, "\t%s\n\r", "-help [command]");
    UART_write(uart, &output, strlen(output));
    sprintf(output, "\t%s\n\r", "-memr [address]");
    UART_write(uart, &output, strlen(output));
    sprintf(output, "\t%s\n\r\n\r", "-print [string]");
    UART_write(uart, &output, strlen(output));
    return;
}


void memoryReadParse(UART_Handle uart, char* input)
{
    long int address;
    char noSpaces[MAXLEN];

    removeSpaces(noSpaces, input);

    if (strlen("-memr") == strlen(noSpaces))
    {
        address = 0;
    }
    else
    {
       char afterCommand[MAXLEN];
       strncpy(afterCommand, noSpaces + strlen("-memr"), strlen(noSpaces) - strlen("memr"));
       char* endPtr;
       address = strtol(afterCommand, &endPtr, 16);
       address = address / 4;
       address = address * 4;
    }


    char output[MAXLEN];
    if ((address > 0x000FFFFF && address < 0x20000000) ||
        (address > 0x2003FFFF && address < 0x40000000))
    {
        sprintf(output, "Address 0x%010X is out of range.\n\r", address);
        UART_write(uart, &output, strlen(output));
        errorCounts[BAD_NUMBER]++;
        return;
    }
    else if (address > 0x44054FFF)
    {
        sprintf(output, "Address is out of range.\n\r");
                UART_write(uart, &output, strlen(output));
                return;
    }


    int value;
    sprintf(output, "0x%010X 0x%010X 0x%010X 0x%010X\n\r", address + 0xC, address + 0x8, address + 0x4, address);
    UART_write(uart, &output, strlen(output));

    value = *(int *) (address + 0xC);
    sprintf(output, "0x%010X ", value);
    UART_write(uart, &output, strlen(output));

    value = *(int *) (address + 0x8);
    sprintf(output, "0x%010X ", value);
    UART_write(uart, &output, strlen(output));

    value = *(int *) (address + 0x4);
    sprintf(output, "0x%010X ", value);
    UART_write(uart, &output, strlen(output));

    value = *(int *) (address + 0x0);
    sprintf(output, "0x%010X\n\r", value);
    UART_write(uart, &output, strlen(output));
    return;

}


void printParse(UART_Handle uart, char* input)
{
    char afterCommand[MAXLEN];
    char output[MAXLEN];

    if (strlen("-print") == strlen(input))
    {
        sprintf(output, "\n\r");
        UART_write(uart, &output, strlen(output));
        return;
    }
    int lenAfterCommand = strlen(input) - strlen("-print");
    strncpy(afterCommand, input + strlen("-print"), lenAfterCommand);
    afterCommand[lenAfterCommand] = 0;
    if (afterCommand[0] == ' ')
    {
        if (strlen(afterCommand) == 1)
        {
            sprintf(output, "\n\r");
            UART_write(uart, &output, strlen(output));
            return;
        }
        char tempString[MAXLEN];
        strncpy(tempString, afterCommand, strlen(afterCommand));
        strncpy(afterCommand, tempString + 1, strlen(tempString) - 1);
        afterCommand[strlen(tempString) - 1] = 0;
    }
   sprintf(output, "%s\n\r", afterCommand);
   UART_write(uart, &output, strlen(output));
   return;
}


// End Parsing Functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// String Manipulation Functions


int startsWith(char *input, char *commandName)
{
    if(strlen(input) >= strlen(commandName))
    {
        char substring[strlen(commandName) + 1];
        strncpy(substring, input, strlen(commandName));
        substring[strlen(commandName)] = 0;

        return (!strcmp(substring, commandName));
    }
    return 0;
}

void removeSpaces(char* noSpaces, const char* input)
{
    int inputIndex;
    int noSpacesIndex = 0;
    for (inputIndex = 0; inputIndex < strlen(input); inputIndex++)
    {
        char character = input[inputIndex];
        if (character != ' ')
        {
            noSpaces[noSpacesIndex] = character;
            noSpacesIndex++;
        }
    }
    noSpaces[noSpacesIndex] = 0;
}


// End String Manipulation Functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
